package reading;

import java.util.Scanner;

/*
 * Clase que utiliza el Scanner de java para leer los ingresos mmediante texto de los usuarios
 * Define unicamente funciones de lectura de diferentes tipos de datos
 */

public class Reader {
    
    Scanner sc = new Scanner(System.in);
    
    /*
     *  Se realiza una lectura de entrada de texto validada como un valor numérico entero
     */
    public int readInt(String message, String errorMessage, String inErrorMessage){
        System.out.println(message + ": ");
        validateInt(errorMessage, inErrorMessage);
        int value = sc.nextInt();
        return value;
    }
    /*
     * Se realiza una lectura de entrada de texto y se valida como un valor numérico real
     * devuelto como un tipo de doble precisión
     */
    public double readDouble(String message, String errorMessage, String suggestionMessage){
        System.out.println(message + ": ");
        validateDouble(errorMessage, suggestionMessage);
        double dato = sc.nextDouble();
        return dato;
    }
    
    /*
     * Se realiza una lectura de entrada de texto y se valida como un valor numérico real
     * devuelto como un tipo de simple precisión (float)
     */
    public float readFloat(String message, String errorMessage, String suggestionMessage){
        System.out.println(message + ": ");
        validateFloat(errorMessage, suggestionMessage);
        float dato = sc.nextFloat();
        return dato;
    }
    /*
     *  Lectura de valores reales que sean solo mayores a cero devuelto como un flotante de 
     *  precisión simple o float
     */
    public float readPosFloat(String errorMessage,
            String suggestionMessage) {
    	
    	float number = 0;
    	do {

    	validateFloat(errorMessage, suggestionMessage);
    	number = sc.nextFloat();

    	} while (number <= 0);

    	return number;
    }
    /*
     * Se valida la lectura de un valor numérico real en un rango deseado sin incluir los extremos
     * se devuelve el valor como un tipo float
     */
    public float readFloatRange(float start, float end, String errorMessage,
            String suggestionMessage) {
    	float number = 0.0f;
    	do {
    			validateFloat(errorMessage, suggestionMessage);
    			number = sc.nextFloat();

    		} while (number < start && number > end );

    	return number;
    }
    /*
     * Lectura simple de una cadena de caracteres hasta que se encuentre un salto de linea
     */
    public String readString(String message){
        System.out.println(message +": ");
        
        return sc.nextLine();

    }
    /*
     * Realiza la lectura de una respuesta del usuario ante una pregunta con dos opciones de 
     * respuesta de tipo si o no
     */
    public String readAnswer(String question, String yes, String no, String errorMessage) {
    	
    	System.out.println(question);
    	
    	String answer = sc.nextLine();
    	
    	while(!answer.equals(yes) && !answer.equals(no)) {
    		
    		System.out.println(errorMessage);
    		answer = sc.nextLine();
    	}
    	
    	return answer;
    }
    
    /*
     *  Realiza una lectura de ingreso de texto y la acepta si solo es alfabetica, es decir, si no presenta
     *  signos operativos ni valores númericos (validación de ingreso correcto de nombres)
     */
    public String validateOnlyText(String message, String errorMessage, String suggestionMessage) {
    	
    	System.out.println(message);
    	String word = sc.nextLine();
    	
    	while(isAlphaNumeric(word)) {
    		
    		System.out.println(errorMessage);
    		System.out.println(suggestionMessage);
    		word = sc.nextLine();
    	}
    	    	
    	return word;
    }
    /*
     * Evalua si una cadena de texto es alfanumérico, es decir, si combina letras, números y/o símbolos
     * operativos como +, -, * y /
     */
    public boolean isAlphaNumeric(String word) {
    	
    	String[] numerics = {"0", "1", "2", "3", "4",
    			             "5", "6", "7", "8", "9", "/",
    			             "*", "-", "+"};
    	
    	for(String num:numerics) {
    		
    		if(word.indexOf(num) != -1) {
    			return true;
    		}
    	}
    	
    	return false;
    }
    
    /*
     * Validación de un valor entero mediante un bucle   
     */
    public void validateInt(String errorMessage, String suggestionMessage) {
    	
    	while (!sc.hasNextInt()) {
            System.out.println(errorMessage);
            System.out.println(suggestionMessage);
            sc.next();
        }
    }
    /*
     * Validación de un valor numérico real que se devuelve como de tipo float
     */
    public void validateFloat(String errorMessage, String suggestionMessage){
        while (!sc.hasNextFloat()) {
            System.out.println(errorMessage);
            System.out.println(suggestionMessage);
            sc.next();
        }
    }
    /*
     * Validación de un valor numérico real que se devuelve como de tipo doble
     */
    public void validateDouble(String errorMessage, String suggestionMessage){
        while (!sc.hasNextDouble()) {
            System.out.println(errorMessage);
            System.out.println(suggestionMessage);
            sc.next();
        }
    }
    /*
     * Realiza una lectura de un valor numérico entero dentro de un rango establecido sin
     * incluir los extremos.
     */
    public int readIntRange(int start, int end, String errorMessage,
                           String suggestionMessage) {
    	
        int number = 0;
        do {
            
            validateInt(errorMessage, suggestionMessage);
            number = sc.nextInt();
            
        } while (number < start && number > end );

        return number;
    }
    /*
     * Lectura de un valor numérico entero mayor a cero
     */
    public int readPosInt(String errorMessage,
                           String suggestionMessage) {
    	
        int number = 0;
        do {
            validateInt(errorMessage, suggestionMessage);
            number = sc.nextInt();
            
        } while (number <= 0);

        return number;
    }
}
