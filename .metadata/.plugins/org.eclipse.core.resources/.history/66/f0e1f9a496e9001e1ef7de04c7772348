package hotelfollowers;

import reading.Reader;
import datemanagment.DateManagment;

import java.util.Date;

import java.util.ArrayList;
import java.io.*;
import client.*;

public class Hotel {
	
	private static final String ROOMS_FILE = "rooms.txt";
	private static Reader reader = new Reader();
	private static DateManagment datemanager = new DateManagment();
	
	private ArrayList<Room> hotelRooms;
	private ArrayList<Client> clients;
	
	public Hotel() {
		
		hotelRooms = new ArrayList<Room>();
		uploadRooms();
		
	}
	
	
	public ArrayList<Room> getHotelRooms() {
		return hotelRooms;
	}

	public ArrayList<Client> getClients() {
		return clients;
	}

	public void setClients(ArrayList<Client> clients) {
		this.clients = clients;
	}

	public String readInfo(BufferedReader buffer) {
		
		String line;
		try {
			line = buffer.readLine();
			return line.substring(line.indexOf(":")+2);
		} catch (IOException e) {
			
			e.printStackTrace();
			return "";
		}
		
	}
	
	public void uploadRooms() {
		
		String pathName = new File("").getAbsolutePath() +"\\";
		pathName += ROOMS_FILE;
		System.out.println(pathName);
		
		try {
			FileReader fReader = new FileReader(new File(pathName));
			BufferedReader buffer = new BufferedReader(fReader);
			String line = " ";
			
			while(line != null) {
				
				short roomNo = Short.parseShort(readInfo(buffer));
				String type = readInfo(buffer);
				String status = readInfo(buffer);
				float cost = Float.parseFloat(readInfo(buffer));
				String specs = readInfo(buffer);
				boolean availability = false;
				if(status.equals("Disponible")) {
					availability = true;
				}
				
				readInfo(buffer);
				
				hotelRooms.add(new Room(type, roomNo, availability, cost, specs));
			}	
		} catch(Exception e) {
			System.out.println("End of file");
			return;
		}
	}
	
	public void addClient(boolean isPrincipal) {
		
		String name = reader.validateOnlyText("Ingrese por favor el nombre del cliente", "Nombre no valido",
				                   "No incluya caracteres numéricos o del tipo *, +, /, -");
		
		String id = reader.validateOnlyNumeric("Ingrese por favor el documento de identidad del cliente:", "Documento no valido",
				                               "Ingrese solo el número del documento sin espacios comas o guiones");
		
		String address = reader.readString("Ingrese por favor la dirección del cliente");
		
		String phoneNo = reader.validateOnlyNumeric("Ingrese por favor el numéro de telefono del cliente:", "Número de telefono no valido",
                                "Ingrese solo el número del documento sin espacios comas o guiones");
		
		
		if(isPrincipal) {
			
			clients.add(new PrincipalClient(name, id, address, phoneNo));
		} else {
			
			clients.add(new CompanionClient(name, id, address, phoneNo));
		}
		
	}
	
	public void doReservation() {
		
		System.out.println("Ingrese por favor el número total de personas con las que se hospeadará el cliente");
		
		
		Date entryDate = datemanager.readAndValidateDate("Ingrese por favor la fecha en la cual se hospedará el cliente", 
				                             "La fecha de ingreso no puede ser anterior a la fecha actual", new Date()); 
		
		Date exitDate = datemanager.readAndValidateDate("Ingrese por favor la fecha hasta la cual se hospedará el cliente", 
				                       "La fecha de salida debe ser una fecha posterior a la fecha de ingreso", entryDate);
		
	}
	
	
	
	

}
